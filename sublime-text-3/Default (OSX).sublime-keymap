[
  { "keys": ["super+shift+1"], "command": "focus_group", "args": { "group": 0 } },
  { "keys": ["super+shift+2"], "command": "focus_group", "args": { "group": 1 } },
  { "keys": ["super+shift+3"], "command": "focus_group", "args": { "group": 2 } },
  { "keys": ["super+shift+4"], "command": "focus_group", "args": { "group": 3 } },
  { "keys": ["f2"], "command": "side_bar_rename" },
  { "keys": ["super+'"], "command": "change_quotes" },
  { "keys": ["enter"], "command": "next_result", "context": [
    {"key": "selector", "operator": "equal", "operand": "text.find-in-files" }]},
  { "keys": ["ctrl+d"], "command": "run_macro_file", "args": {"file": "res://Packages/Default/Delete Line.sublime-macro"} },
  { "keys": ["ctrl+alt+up"], "command": "scroll_lines", "args": {"amount": 5.0} },
  { "keys": ["ctrl+alt+down"], "command": "scroll_lines", "args": {"amount": -5.0} },
  { "keys": ["command+o"], "command": "goto_definition" },

  { "keys": ["ctrl+v"], "command": "unbound" },
  { "keys": ["ctrl+w"], "command": "focus_neighboring_group" },
  { "keys": ["ctrl+shift+j"], "command": "select_lines", "args": {"forward": true} },
  { "keys": ["ctrl+shift+k"], "command": "select_lines", "args": {"forward": false} },
  { "keys": ["super+ctrl+c"], "command": "copy_filepath_with_line_numbers"},
  { "keys": ["super+ctrl+m"], "command": "back_to_definition"},
  { "keys": ["ctrl+p, ctrl+p"], "command": "copy_filepath_with_line_numbers"},

  // DashDoc
  { "keys": ["ctrl+h"], "command": "dash_doc" },

  // CTags bindings
  { "command": "navigate_to_definition", "keys": ["super+o"] },

  // FileBrowser
  {
    "keys": ["ctrl+o"],
    "command": "dired",
    "args": {
      "immediate": true,
      "single_pane": true,
      "other_group": "left",
      "project": true
    }
  },

  // File path
  { "keys": ["super+ctrl+c"], "command": "copy_path" },

  // Markdown Preview
  {
    "keys": ["ctrl+m"],
    "command": "markdown_preview",
    "args": {
      "target": "browser",
      "parser": "github"
    }
  },

  // Keybindings
  { "keys": ["ctrl+?"], "command": "cheat_sheet" },
  { "keys": ["ctrl+/"], "command": "find_keymap" },

  // Github Tools
  { "keys": ["ctrl+g", "b"], "command": "git_blame" },
  { "keys": ["ctrl+g", "d"], "command": "git_diff_all" },

  // Shell commands
  { "keys": ["ctrl+c", "c"], "command": "shell_command" },
  {
    "keys": ["c"],
    "command": "shell_command_refresh",
    "command_prefix": "source $HOME/.bashrc",
    "context": [{ "key": "setting.ShellCommand" }]
  },
  {
    "keys": ["ctrl+c", "r"],
    "command": "shell_command",
    "args": {
      "command_prefix": "source $HOME/.bashrc && rvm-auto-ruby -S",
      "prompt": "Shell Command"
    }
  },
  { // Process list
    "keys": ["ctrl+c", "p"],
    "command": "shell_command",
    "args": {
      "command": "ps xcro user,pid,%cpu,cputime,%mem,command | head -n 28",
    }
  },
  { // mysql process list
    "keys": ["ctrl+c", "s"],
    "command": "shell_command",
    "args": {
      "command": "ps aux | grep mysql",
    }
  },
  { // Send SIGKILL to a process number selected
    // in a Shell Command Window
    "keys": ["K"],
    "command": "shell_command",
    "args": {
      "command": "kill -9",
      "region": "arg"
    },
    "context": [{ "key": "setting.ShellCommand" }]
  },

  // SublimeREPL bindings:
  // =====================
  { "keys": ["super+enter"], "command": "repl_transfer_current", "args": {"scope": "block"}},
  { "keys": ["super+shift+enter"], "command": "repl_transfer_current", "args": {"scope": "selection"}},
  { "keys": ["alt+super+r"], "command": "refresh_namespaces_in_repl"},
  { "keys": ["alt+super+i"], "command": "switch_to_current_namespace_in_repl"},
  { "keys": ["alt+super+x"], "command": "run_clojure_tests_from_current_namespace_in_repl"},
  { "keys": ["alt+super+a"], "command": "run_all_clojure_tests_from_project_in_repl"},

  // Start a new clojure repl. Leaves existing open. Note that SublimeREPL doesn't handle multiple
  // REPLs very well. They will work but it's not clear which repl will receive commands sent from
  // another clojure editor.
  { "keys": ["alt+super+l"],
    "command": "run_existing_window_command",
    "args":{"id": "repl_clojure",
            "file": "config/Clojure/Main.sublime-menu"}},

  // BracketHighlighter bindings:
  // ===========================
  // Swap bracket type
  { "keys": ["ctrl+shift+]"], "command": "swap_brackets"},
  // Swap quotes (only goes boths ways in supported languages...)
  { "keys": ["ctrl+shift+'"], "command": "bh_key", "args": {"lines" : true, "plugin": {"type": ["single_quote", "double_quote", "py_single_quote", "py_double_quote"], "command": "bh_modules.swapquotes"} }},
  // Select text between brackets
  { "keys": ["ctrl+alt+a"], "command": "bh_key", "args": {"lines" : true, "plugin": {"type": ["__all__"], "command": "bh_modules.bracketselect"} } },
  // Select tag name of HTML/XML tag (both opening name and closing)
  { "keys": ["ctrl+alt+t"], "command": "bh_key", "args": {"plugin": {"type": ["cfml", "html", "angle"], "command": "bh_modules.tagnameselect"} } },
  // Toggle high visibility mode
  { "keys": ["alt+super+="], "command": "bh_toggle_high_visibility"},
]
